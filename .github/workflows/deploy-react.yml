name: Deploy React App to IIS

on:
  push:
    branches:
      - "test"
      - "main"

jobs:
  build:
    runs-on: self-hosted  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.14.0'

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Debug Info
        run: |
          echo "Node Version:"
          node -v
          echo "NPM Version:"
          npm -v
          echo "Installed Packages:"
          npm list

      - name: Set Environment
        id: set_env
        run: |
          echo "ENVIRONMENT=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Build project for ${{ env.ENVIRONMENT }}
        shell: powershell
        run: |
          switch ("${{ env.ENVIRONMENT }}") {
            "test"  { npm run build:test }
            "main"  { npm run build:main }
            default { Write-Error "Unknown environment: $($env:ENVIRONMENT)" }
          }

      - name: Deploy to IIS
        run: |
          $envName = "${{ env.ENVIRONMENT }}"
          $websiteName = "courseClient_$envName"
          $appPoolName = "courseClient_$envName"

          if ((Get-WebSiteState -Name $websiteName).Value -eq "Started") {
            Stop-WebSite -Name $websiteName
            Write-Output "Stopped Website $websiteName"
          }
          if ((Get-WebAppPoolState -Name $appPoolName).Value -eq "Started") {
            Stop-WebAppPool -Name $appPoolName
            Write-Output "Stopped Application Pool $appPoolName"
          }

          Start-Sleep -Seconds 15
          Copy-Item -Path "${{ github.workspace }}\build\*" -Destination "C:\inetpub\wwwroot\$websiteName" -Recurse -Force

          if ((Get-WebSiteState -Name $websiteName).Value -eq "Stopped") {
            Start-WebSite -Name $websiteName
            Write-Output "Started Website $websiteName"
          }
          if ((Get-WebAppPoolState -Name $appPoolName).Value -eq "Stopped") {
            Start-WebAppPool -Name $appPoolName
            Write-Output "Started Application Pool $appPoolName"
          }

          if ($lastexitcode -lt 8) { $global:lastexitcode = 0 }
